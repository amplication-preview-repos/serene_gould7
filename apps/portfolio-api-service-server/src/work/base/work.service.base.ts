/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Work as PrismaWork,
  CategoryOfWork as PrismaCategoryOfWork,
} from "@prisma/client";

export class WorkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkCountArgs, "select">): Promise<number> {
    return this.prisma.work.count(args);
  }

  async works(args: Prisma.WorkFindManyArgs): Promise<PrismaWork[]> {
    return this.prisma.work.findMany(args);
  }
  async work(args: Prisma.WorkFindUniqueArgs): Promise<PrismaWork | null> {
    return this.prisma.work.findUnique(args);
  }
  async createWork(args: Prisma.WorkCreateArgs): Promise<PrismaWork> {
    return this.prisma.work.create(args);
  }
  async updateWork(args: Prisma.WorkUpdateArgs): Promise<PrismaWork> {
    return this.prisma.work.update(args);
  }
  async deleteWork(args: Prisma.WorkDeleteArgs): Promise<PrismaWork> {
    return this.prisma.work.delete(args);
  }

  async getCategoryOfWork(
    parentId: string
  ): Promise<PrismaCategoryOfWork | null> {
    return this.prisma.work
      .findUnique({
        where: { id: parentId },
      })
      .categoryOfWork();
  }
}
