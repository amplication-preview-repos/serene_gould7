/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkService } from "../work.service";
import { WorkCreateInput } from "./WorkCreateInput";
import { Work } from "./Work";
import { WorkFindManyArgs } from "./WorkFindManyArgs";
import { WorkWhereUniqueInput } from "./WorkWhereUniqueInput";
import { WorkUpdateInput } from "./WorkUpdateInput";

export class WorkControllerBase {
  constructor(protected readonly service: WorkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Work })
  async createWork(@common.Body() data: WorkCreateInput): Promise<Work> {
    return await this.service.createWork({
      data: {
        ...data,

        categoryOfWork: data.categoryOfWork
          ? {
              connect: data.categoryOfWork,
            }
          : undefined,
      },
      select: {
        categoryOfWork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        image: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Work] })
  @ApiNestedQuery(WorkFindManyArgs)
  async works(@common.Req() request: Request): Promise<Work[]> {
    const args = plainToClass(WorkFindManyArgs, request.query);
    return this.service.works({
      ...args,
      select: {
        categoryOfWork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        image: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Work })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async work(
    @common.Param() params: WorkWhereUniqueInput
  ): Promise<Work | null> {
    const result = await this.service.work({
      where: params,
      select: {
        categoryOfWork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        image: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Work })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWork(
    @common.Param() params: WorkWhereUniqueInput,
    @common.Body() data: WorkUpdateInput
  ): Promise<Work | null> {
    try {
      return await this.service.updateWork({
        where: params,
        data: {
          ...data,

          categoryOfWork: data.categoryOfWork
            ? {
                connect: data.categoryOfWork,
              }
            : undefined,
        },
        select: {
          categoryOfWork: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          description: true,
          id: true,
          image: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Work })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWork(
    @common.Param() params: WorkWhereUniqueInput
  ): Promise<Work | null> {
    try {
      return await this.service.deleteWork({
        where: params,
        select: {
          categoryOfWork: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          description: true,
          id: true,
          image: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
