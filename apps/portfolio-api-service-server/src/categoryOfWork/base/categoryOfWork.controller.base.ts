/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoryOfWorkService } from "../categoryOfWork.service";
import { CategoryOfWorkCreateInput } from "./CategoryOfWorkCreateInput";
import { CategoryOfWork } from "./CategoryOfWork";
import { CategoryOfWorkFindManyArgs } from "./CategoryOfWorkFindManyArgs";
import { CategoryOfWorkWhereUniqueInput } from "./CategoryOfWorkWhereUniqueInput";
import { CategoryOfWorkUpdateInput } from "./CategoryOfWorkUpdateInput";
import { ProductsFindManyArgs } from "../../products/base/ProductsFindManyArgs";
import { Products } from "../../products/base/Products";
import { ProductsWhereUniqueInput } from "../../products/base/ProductsWhereUniqueInput";
import { WorkFindManyArgs } from "../../work/base/WorkFindManyArgs";
import { Work } from "../../work/base/Work";
import { WorkWhereUniqueInput } from "../../work/base/WorkWhereUniqueInput";

export class CategoryOfWorkControllerBase {
  constructor(protected readonly service: CategoryOfWorkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CategoryOfWork })
  async createCategoryOfWork(
    @common.Body() data: CategoryOfWorkCreateInput
  ): Promise<CategoryOfWork> {
    return await this.service.createCategoryOfWork({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CategoryOfWork] })
  @ApiNestedQuery(CategoryOfWorkFindManyArgs)
  async categoryOfWorks(
    @common.Req() request: Request
  ): Promise<CategoryOfWork[]> {
    const args = plainToClass(CategoryOfWorkFindManyArgs, request.query);
    return this.service.categoryOfWorks({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CategoryOfWork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async categoryOfWork(
    @common.Param() params: CategoryOfWorkWhereUniqueInput
  ): Promise<CategoryOfWork | null> {
    const result = await this.service.categoryOfWork({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CategoryOfWork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCategoryOfWork(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() data: CategoryOfWorkUpdateInput
  ): Promise<CategoryOfWork | null> {
    try {
      return await this.service.updateCategoryOfWork({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CategoryOfWork })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCategoryOfWork(
    @common.Param() params: CategoryOfWorkWhereUniqueInput
  ): Promise<CategoryOfWork | null> {
    try {
      return await this.service.deleteCategoryOfWork({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productsItems")
  @ApiNestedQuery(ProductsFindManyArgs)
  async findProductsItems(
    @common.Req() request: Request,
    @common.Param() params: CategoryOfWorkWhereUniqueInput
  ): Promise<Products[]> {
    const query = plainToClass(ProductsFindManyArgs, request.query);
    const results = await this.service.findProductsItems(params.id, {
      ...query,
      select: {
        categoryOfWork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        image: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productsItems")
  async connectProductsItems(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: ProductsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productsItems: {
        connect: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productsItems")
  async updateProductsItems(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: ProductsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productsItems: {
        set: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productsItems")
  async disconnectProductsItems(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: ProductsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/works")
  @ApiNestedQuery(WorkFindManyArgs)
  async findWorks(
    @common.Req() request: Request,
    @common.Param() params: CategoryOfWorkWhereUniqueInput
  ): Promise<Work[]> {
    const query = plainToClass(WorkFindManyArgs, request.query);
    const results = await this.service.findWorks(params.id, {
      ...query,
      select: {
        categoryOfWork: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        image: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/works")
  async connectWorks(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: WorkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      works: {
        connect: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/works")
  async updateWorks(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: WorkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      works: {
        set: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/works")
  async disconnectWorks(
    @common.Param() params: CategoryOfWorkWhereUniqueInput,
    @common.Body() body: WorkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      works: {
        disconnect: body,
      },
    };
    await this.service.updateCategoryOfWork({
      where: params,
      data,
      select: { id: true },
    });
  }
}
