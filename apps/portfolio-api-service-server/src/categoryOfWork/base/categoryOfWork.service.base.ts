/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CategoryOfWork as PrismaCategoryOfWork,
  Products as PrismaProducts,
  Work as PrismaWork,
} from "@prisma/client";

export class CategoryOfWorkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoryOfWorkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categoryOfWork.count(args);
  }

  async categoryOfWorks(
    args: Prisma.CategoryOfWorkFindManyArgs
  ): Promise<PrismaCategoryOfWork[]> {
    return this.prisma.categoryOfWork.findMany(args);
  }
  async categoryOfWork(
    args: Prisma.CategoryOfWorkFindUniqueArgs
  ): Promise<PrismaCategoryOfWork | null> {
    return this.prisma.categoryOfWork.findUnique(args);
  }
  async createCategoryOfWork(
    args: Prisma.CategoryOfWorkCreateArgs
  ): Promise<PrismaCategoryOfWork> {
    return this.prisma.categoryOfWork.create(args);
  }
  async updateCategoryOfWork(
    args: Prisma.CategoryOfWorkUpdateArgs
  ): Promise<PrismaCategoryOfWork> {
    return this.prisma.categoryOfWork.update(args);
  }
  async deleteCategoryOfWork(
    args: Prisma.CategoryOfWorkDeleteArgs
  ): Promise<PrismaCategoryOfWork> {
    return this.prisma.categoryOfWork.delete(args);
  }

  async findProductsItems(
    parentId: string,
    args: Prisma.ProductsFindManyArgs
  ): Promise<PrismaProducts[]> {
    return this.prisma.categoryOfWork
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productsItems(args);
  }

  async findWorks(
    parentId: string,
    args: Prisma.WorkFindManyArgs
  ): Promise<PrismaWork[]> {
    return this.prisma.categoryOfWork
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .works(args);
  }
}
