/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CategoryOfWork } from "./CategoryOfWork";
import { CategoryOfWorkCountArgs } from "./CategoryOfWorkCountArgs";
import { CategoryOfWorkFindManyArgs } from "./CategoryOfWorkFindManyArgs";
import { CategoryOfWorkFindUniqueArgs } from "./CategoryOfWorkFindUniqueArgs";
import { CreateCategoryOfWorkArgs } from "./CreateCategoryOfWorkArgs";
import { UpdateCategoryOfWorkArgs } from "./UpdateCategoryOfWorkArgs";
import { DeleteCategoryOfWorkArgs } from "./DeleteCategoryOfWorkArgs";
import { ProductsFindManyArgs } from "../../products/base/ProductsFindManyArgs";
import { Products } from "../../products/base/Products";
import { WorkFindManyArgs } from "../../work/base/WorkFindManyArgs";
import { Work } from "../../work/base/Work";
import { CategoryOfWorkService } from "../categoryOfWork.service";
@graphql.Resolver(() => CategoryOfWork)
export class CategoryOfWorkResolverBase {
  constructor(protected readonly service: CategoryOfWorkService) {}

  async _categoryOfWorksMeta(
    @graphql.Args() args: CategoryOfWorkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CategoryOfWork])
  async categoryOfWorks(
    @graphql.Args() args: CategoryOfWorkFindManyArgs
  ): Promise<CategoryOfWork[]> {
    return this.service.categoryOfWorks(args);
  }

  @graphql.Query(() => CategoryOfWork, { nullable: true })
  async categoryOfWork(
    @graphql.Args() args: CategoryOfWorkFindUniqueArgs
  ): Promise<CategoryOfWork | null> {
    const result = await this.service.categoryOfWork(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CategoryOfWork)
  async createCategoryOfWork(
    @graphql.Args() args: CreateCategoryOfWorkArgs
  ): Promise<CategoryOfWork> {
    return await this.service.createCategoryOfWork({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CategoryOfWork)
  async updateCategoryOfWork(
    @graphql.Args() args: UpdateCategoryOfWorkArgs
  ): Promise<CategoryOfWork | null> {
    try {
      return await this.service.updateCategoryOfWork({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CategoryOfWork)
  async deleteCategoryOfWork(
    @graphql.Args() args: DeleteCategoryOfWorkArgs
  ): Promise<CategoryOfWork | null> {
    try {
      return await this.service.deleteCategoryOfWork(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Products], { name: "productsItems" })
  async findProductsItems(
    @graphql.Parent() parent: CategoryOfWork,
    @graphql.Args() args: ProductsFindManyArgs
  ): Promise<Products[]> {
    const results = await this.service.findProductsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Work], { name: "works" })
  async findWorks(
    @graphql.Parent() parent: CategoryOfWork,
    @graphql.Args() args: WorkFindManyArgs
  ): Promise<Work[]> {
    const results = await this.service.findWorks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
